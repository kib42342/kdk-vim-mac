" My currently working version Vimrc
" I kept all other settings in plugins/settings directory
"
" Francis
" kib42342@yahoo.com.tw
"
source ~/.vim/vimrc-kdk-modules
" 讓.vimrc配置變更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC


" 使用模板
" 新增模版以副檔案為檔名置於templates資料夾中
au BufNewFile * :silent! exec ":0r ".$HOME."/.vim/templates/".&ft

" 開啟文件類型偵測
filetype on
" 根據偵測類型加載插件
filetype plugin on
" 為搜尋到的字加上高亮標示
set hlsearch
" 開啟即時搜索功能
set incsearch
" 搜索時大小寫不敏感
set ignorecase
" 關閉兼容模式
set nocompatible
" vim 自身命令行模式智能補全
set wildmenu
" 設定行號
set nu
" 設定文件編碼
set fileencodings=utf-8,ucs-bom,big5,cp950
set termencoding=utf-8
set encoding=utf-8

" swap files out of the project root
set backupdir=~/.vim/backup/
set directory=~/.vim/swap/

" 自動補齊顯示參數
" set completeopt=longest,menu,preview
set completeopt=longest,menu

" 設定語法高亮
syntax on
" 禁止光標閃爍
"set gcr=a:block-blinkon0
"" 禁止顯示滾動條
"set guioptions-=l
"set guioptions-=L
"set guioptions-=r
"set guioptions-=R
"" 禁止顯示菜單和工具條
"set guioptions-=m
"set guioptions-=T

" run phpunit tests
" :!phpunit %<CR>

" 儲存時確認
set confirm

" 快捷鍵顯示
set showcmd

" 縮排
" Turn on auto-indent
"       :set autoindent
" Turn on intelligent auto-indent
"       :set smartindent
" Defines 4 spaces as indent size
"       :set shiftwidth=4
" hit ctrl-t, ctrl-d Indent/un-indent in insert mode
" 在編輯模式時可用ctrl+t/ctrl+d 進行縮排
" 在一般模式時可用>>/<< 進行縮排
" Indent
" >>
" Un-indent
" <<
set smartindent
set shiftwidth=4


highlight Search cterm=underline
" 為當前光標所在之行加入底線加強提示
set cursorline
" 顯示狀態列
set laststatus=2

" 配色方案
set t_Co=256
set background=dark
""set background=light
"colorscheme nerv-ous
"colorscheme solarized
"colorscheme phd
"let g:molokai_original = 1
"let g:rehash256 = 1
"colorscheme molokai
colorscheme gruvbox
"

" <<<折疊代碼>>>
" 設定參數：
" manual //手工定義
" indent //用縮進表示
" expr //用表達式
" syntax //用語法高亮
" diff //對沒有更改的文本進行折疊
" marker //用標志折疊
"
" 折疊處輸入命令說明：
" zc 折疊
" zC 對所在范圍內所有嵌套的折疊點進行折疊
" zo 展開折疊
" zO 對所在范圍內所有嵌套的折疊點進行展開
" [z 到當前打開的折疊的開始處
" ]z 到當前打開的折疊的末尾處
" zj 向下移動．到達下一個折疊的開始處．關閉的折疊也被計入
" zk 向上移動．到前一折疊處．關閉的折疊也被計入
"
" marker 折疊方式說明：
" default marker is  和
" zf 創建折疊，
"    zf56G ，建立當前行起到56行的代碼折疊
"    10zf 10zf+ 10zfj ，建立當前行起到後10行的代碼折疊
"    10zf- zf10k ，建立當前行起到之前10行的代碼折疊
"    在括號處 zf% ，建立當前行起到對應的匹配的括號上去（ (),{},[],<>等 ）
" zd 刪除在光標下的折疊．ONLY FOR "foldmethod" set "manual" OR "marker"
" zD 循環刪除在光標下的折疊，嵌套刪除折疊．ONLY FOR "foldmethod" set "manual" OR "marker"
" zE 除去窗口裡"所有"的折疊．ONLY FOR "foldmethod" set "manual" OR "marker
"set foldmethod=manual
"set foldmethod=indent "set foldmethod=expr
"set foldmethod=syntax
"set foldmethod=diff
set foldmethod=marker



" Mappings to access buffers (don't use "\p" because a
" delay before pressing "p" would accidentally paste).
" ,l       : list buffers
" ,b ,f ,g : go back/forward/last-used
" ,1 ,2 ,3 : go to buffer 1/2/3 etc
nnoremap <Leader><Leader>l :ls<CR>
nnoremap <Leader>b :bp<CR>
nnoremap <Leader>d :bd<CR>
nnoremap <Leader>f :bn<CR>
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
" It's useful to show the buffer number in the status line.
"set laststatus=2 statusline=%02n:%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set ttimeoutlen=50



" 快捷鍵前綴<leader>
let mapleader=","

let g:ycm_auto_trigger = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_use_clangd = 0

" Airlinerefresh
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline#extensions#tabline#formatter = 'default'
" let g:airline#extensions#tabline#formatter = 'jsformatter'
" let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" zencode(emmet.vim) 操作方式為"<ctrl+e>+,"
" https://blog.zfanw.com/zencoding-vim-tutorial-chinese/
"let g:user_emmet_mode='inv'
"let g:user_emmet_mode='a'
let g:user_emmet_mode='a'
let g:user_emmet_install_global = 0
autocmd FileType htm,html,css,php EmmetInstall
let g:user_emmet_leader_key='<C-e>'

" 常用操作快捷鍵設定 begin
" - HIT ,s on the word to replace the word
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>
nnoremap <Leader>1s :%s/\<<C-r><C-w>\>//g<Left><Left>

" - 按F8為光標所的字進行全頁搜尋，並加上《》包圍該字
nnoremap <expr> <F8> ':%s/\<'.expand('<cword>').'\>/<&>/g<CR>'

" - select ALL
map <C-A> ggVG
" - Insert mode 打 CTRL＋a 文件全選
inoremap <C-A> <ESC>ggVG

" - 按兩下; 進入行尾並以；結束
inoremap ;; <ESC>$i<RIGHT>;

" - sdcv字典 按K會自動用sdcv查詢資料
set keywordprg=sdcv\ -u\ 懶蟲簡明英漢詞典



" - 定義快捷鍵到行首行尾
nnoremap <Leader>lb 0
nnoremap <Leader>le $
" - 定義快捷鍵將所選文字複製到系統剪貼簿
vmap <Leader>y "+y
" - 定義快捷鍵將系統剪貼簿文字複製到VIM
nnoremap <Leader>p "+p
" - 定義快捷鍵將當前分割窗口關閉 
nnoremap <Leader>q :q<CR>
" - 定義快捷鍵將當前分割窗口強制關閉 
nnoremap <Leader><Leader>q :q!<CR>
" - 定義快捷鍵將當前分割窗口內容儲存 
nnoremap <Leader>w :w<CR>
" - 定義快捷鍵將當前分割窗口內容強制儲存 
nnoremap <Leader><Leader>w :w!<CR>
" - 定義快捷鍵將當前分割窗口內容儲存後關閉 
nnoremap <Leader>x :x!<CR>
" - 定義快捷鍵跳轉各子窗口 
nnoremap nw <C-W><C-W>
" - 定義快捷鍵跳轉右子窗口 
nnoremap <Leader>lw <C-W>l
nnoremap <C-l> <C-w>l
" - 定義快捷鍵跳轉左子窗口 
nnoremap <Leader>hw <C-W>h
nnoremap <C-h> <C-w>h
" - 定義快捷鍵跳轉上子窗口 
nnoremap <Leader>kw <C-W>k
nnoremap <C-k> <C-w>k
" - 定義快捷鍵跳轉下子窗口 
nnoremap <Leader>jw <C-W>j
nnoremap <C-j> <C-w>j
" - 定義快捷鍵在結對符({})之間跳轉
nnoremap <Leader>m %

" - easy escaping to normal mode
inoremap jj <esc>

" - Auto change directory to match current file ,cd
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>

" - easier window navigation
nnoremap sp <C-w>n
nnoremap spv <C-w>v

"" - Load the current buffer in Chrome (for macos)
"nnoremap <Leader>c :!open -a Google\ Chrome<cr>
"" - Load the current buffer in firefox(for macos)
"nnoremap <Leader>f :!open -a firefox<cr>


" - use py3
let g:UltiSnipsUsePythonVersion = 3

" - easy motion stuff
" 指標使用快捷鍵進行快速移動
let g:EasyMotion_smartcase = 1
let g:EasyMotion_leader_key = '<Leader>'
"let g:EasyMotion_startofline = 0 "keep cursor colum when JK motion
map <Leader><Leader> <Plug>(easymotion-prefix)
map <Leader><Leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>. <Plug>(easymotion-repeat)
map <Leader><Leader>r :AirlineRefresh<CR>

" - 定義快捷鍵自動補齊code
"inoremap <Tab><Tab> <C-x><C-o>

" - HIT ,t toggle NERDTRE
" 開啟資料夾清單
nnoremap <Leader>t :NERDTreeToggle<CR><CR>k

" - 定義成對符號自動補齊code
inoremap ( ()<Esc>i
inoremap " ""<Esc>i
inoremap ' ''<Esc>i
inoremap [ []<Esc>i
inoremap {<CR> {<CR>}<Esc>ko
inoremap { {}<ESC>i



" - 定義成對符號自動補齊code
inoremap php<CR> <?php<CR>?><Esc>ko

" - 輸入模式中跳至行末
inoremap <Leader>e <Esc>$a
" - 輸入模式中跳至行首
inoremap <Leader>b <Esc>0i

" hit enter to cancel searched highlight 按《ENTER》取消高亮標示
nmap <CR> <ESC>:nohlsearch<CR>

" 常用操作快捷鍵設定 end

"" 將外部命令wmctrl控製窗口最大化命令行參數封裝成一個vim的函數
"fun! ToggleFullscreen()
"	call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
"endf
"" 全屏開/關快捷鍵
"map <silent> <F11> :call ToggleFullscreen()<CR>
"" 啟動vim時自動全屏
"autocmd VimEnter * call ToggleFullscreen()

" This is the default option:
"   - Preview window on the right with 50% width
"   - CTRL-/ will toggle preview window.
" - Note that this array is passed as arguments to fzf#vim#with_preview function.
" - To learn more about preview window options, see `--preview-window` section of `man fzf`.
let g:fzf_preview_window = ['right:50%', 'ctrl-/']

" Preview window on the upper side of the window with 40% height,
" hidden by default, ctrl-/ to toggle
let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/']

" Empty value to disable preview window altogether
let g:fzf_preview_window = []
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'


set rtp+=/usr/local/opt/fzf
