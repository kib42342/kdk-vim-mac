" My currently working version Vimrc
" I kept all other settings in plugins/settings directory
"
" Francis
" kib42342@yahoo.com.tw
"
source ~/.vim/vimrc-kdk-modules
" 讓.vimrc配置變更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 使用模板
" 新增模版以副檔案為檔名置於templates資料夾中
au BufNewFile * :silent! exec ":0r ".$HOME."/.vim/templates/".&ft


" 開啟文件類型偵測
filetype on
" 根據偵測類型加載插件
filetype plugin on
" 為搜尋到的字加上高亮標示
set hlsearch
" 開啟即時搜索功能
set incsearch
" 搜索時大小寫不敏感
set ignorecase
" 關閉兼容模式
set nocompatible
" vim 自身命令行模式智能補全
set wildmenu
" 設定行號
set nu
" 設定文件編碼
set fileencodings=utf-8,ucs-bom,big5,cp950
set termencoding=utf-8
set encoding=utf-8
" swap files out of the project root
set backupdir=~/.vim/backup/
set directory=~/.vim/swap/

" 自動補齊顯示參數
" set completeopt=longest,menu,preview
set completeopt=longest,menu

" 設定語法高亮
syntax on

" run phpunit tests
" :!phpunit %<CR>


" 
set confirm
"
set showcmd
" 縮排
" Turn on auto-indent
"       :set autoindent
" Turn on intelligent auto-indent
"       :set smartindent
" Defines 4 spaces as indent size
"       :set shiftwidth=4
" hitctrl-t, ctrl-d Indent/un-indent in insert mode
" Indent
" >>
" Un-indent
" <<
set smartindent


" hit enter to cancel searched highlight 按《ENTER》取消高亮標示
noremap <CR> :nohlsearch<CR>
highlight Search cterm=underline
" 為當前光標所在之行加入底線加強提示
set cursorline
" 顯示狀態列
set laststatus=2

" 配色方案
"set t_Co=256
set background=dark
"set background=light
"colorscheme nerv-ous
"colorscheme solarized
colorscheme molokai
"colorscheme phd

" <<<折疊代碼>>>
" 設定參數：
" manual //手工定義
" indent //用縮進表示
" expr //用表達式
" syntax //用語法高亮
" diff //對沒有更改的文本進行折疊
" marker //用標志折疊
"
" 折疊處輸入命令說明：
" zc 折疊
" zC 對所在范圍內所有嵌套的折疊點進行折疊
" zo 展開折疊
" zO 對所在范圍內所有嵌套的折疊點進行展開
" [z 到當前打開的折疊的開始處
" ]z 到當前打開的折疊的末尾處
" zj 向下移動．到達下一個折疊的開始處．關閉的折疊也被計入
" zk 向上移動．到前一折疊處．關閉的折疊也被計入
"
" marker 折疊方式說明：
" default marker is  和
" zf 創建折疊，
"    zf56G ，建立當前行起到56行的代碼折疊
"    10zf 10zf+ 10zfj ，建立當前行起到後10行的代碼折疊
"    10zf- zf10k ，建立當前行起到之前10行的代碼折疊
"    在括號處 zf% ，建立當前行起到對應的匹配的括號上去（ (),{},[],<>等 ）
" zd 刪除在光標下的折疊．ONLY FOR "foldmethod" set "manual" OR "marker"
" zD 循環刪除在光標下的折疊，嵌套刪除折疊．ONLY FOR "foldmethod" set "manual" OR "marker"
" zE 除去窗口裡"所有"的折疊．ONLY FOR "foldmethod" set "manual" OR "marker"
"set foldmethod=manual
"set foldmethod=indent
"set foldmethod=expr
"set foldmethod=syntax
"set foldmethod=diff
set foldmethod=marker

" Mappings to access buffers (don't use "\p" because a
" delay before pressing "p" would accidentally paste).
" ,l       : list buffers
" ,b ,f ,g : go back/forward/last-used
" ,1 ,2 ,3 : go to buffer 1/2/3 etc
nnoremap <Leader>l :ls<CR>
nnoremap <Leader>b :bp<CR>
nnoremap <Leader>d :bd<CR>
nnoremap <Leader>f :bn<CR>
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
" It's useful to show the buffer number in the status line.
"set laststatus=2 statusline=%02n:%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set ttimeoutlen=50



" 快捷鍵前綴<leader>
let mapleader=","

let g:ycm_auto_trigger = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_use_clangd = 0

" zencode(emmet.vim) 操作方式為"<ctrl+e>+,"
" https://blog.zfanw.com/zencoding-vim-tutorial-chinese/
"let g:user_emmet_mode='inv'
"let g:user_emmet_mode='a'
let g:user_emmet_mode='a'
let g:user_emmet_install_global = 0
autocmd FileType htm,html,css,php EmmetInstall
let g:user_emmet_leader_key='<C-e>'

" 常用操作快捷鍵設定 begin
" - HIT ,s on the word to replace the word
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" - 按F8為光標所的字進行全頁搜尋，並加上《》包圍該字
nnoremap <expr> <F8> ':%s/\<'.expand('<cword>').'\>/<&>/g<CR>'

" - select ALL
map <C-A> ggVG
" - Insert mode 打 CTRL＋a 文件全選
inoremap <C-A> <ESC>ggVG

" - 按兩下; 進入行尾並以；結束
inoremap ;; <ESC>$i<RIGHT>;

" - sdcv字典 按K會自動用sdcv查詢資料
set keywordprg=sdcv\ -u\ 懶蟲簡明英漢詞典



" - 定義快捷鍵到行首行尾
nmap LB 0
nmap LE $
" - 定義快捷鍵將所選文字複製到系統剪貼簿
vnoremap <Leader>y "+y
" - 定義快捷鍵將系統剪貼簿文字複製到VIM
nmap <Leader>p "+p
" - 定義快捷鍵將當前分割窗口關閉 
nmap <Leader>q :q<CR>
nmap <Leader><Leader>q :q!<CR>
" - 定義快捷鍵將當前分割窗口內容儲存 
nmap <Leader>w :w<CR>
nmap <Leader><Leader>w :w!<CR>
" - 定義快捷鍵將當前分割窗口內容儲存後關閉 
nmap <Leader>x :x!<CR>
" - 定義快捷鍵跳轉各子窗口 
nnoremap nw <C-W><C-W>
" - 定義快捷鍵跳轉右子窗口 
nnoremap <Leader>lw <C-W>l
nmap <C-l> <C-w>l
" - 定義快捷鍵跳轉左子窗口 
nnoremap <Leader>hw <C-W>h
nmap <C-h> <C-w>h
" - 定義快捷鍵跳轉上子窗口 
nnoremap <Leader>kw <C-W>k
nmap <C-k> <C-w>k
" - 定義快捷鍵跳轉下子窗口 
nnoremap <Leader>jw <C-W>j
nmap <C-j> <C-w>j
" - 定義快捷鍵在結對符({})之間跳轉
nmap <Leader>m %

" - easy escaping to normal mode
imap jj <esc>

" - Auto change directory to match current file ,cd
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>

" - easier window navigation
nmap sp <C-w>n
nmap spv <C-w>v

" - Load the current buffer in Chrome (for macos)
nmap ,c :!open -a Google\ Chrome<cr>
" - Load the current buffer in firefox(for macos)
nmap ,f :!open -a firefox<cr>

" - easy motion stuff
let g:EasyMotion_smartcase = 1
let g:EasyMotion_leader_key = '<Leader>'
"let g:EasyMotion_startofline = 0 "keep cursor colum when JK motion
map <Leader><Leader> <Plug>(easymotion-prefix)
map <Leader><Leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>. <Plug>(easymotion-repeat)
map <Leader><Leader>r :AirlineRefresh<CR>

" - 定義快捷鍵自動補齊code
imap <Tab><Tab> <C-x><C-o>
" - HIT ,t toggle NERDTRE
nnoremap <Leader>t :NERDTreeToggle<CR><CR>k

" 常用操作快捷鍵設定 end



